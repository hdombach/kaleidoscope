#version 450

layout(set = 0, binding = 0, rgba8) uniform image2D result;

layout(set = 0, binding = 1) uniform GlobalUniformBuffer {
	vec4 camera_translation;
	mat4 camera_rotation;
} global_uniform;

struct Vertex {
		vec3 pos;
		vec3 color;
		vec2 texCoord;
};

layout(binding = 2) readonly buffer vertex_buffer {
	Vertex vertices[];
};
layout(binding = 3) readonly buffer index_buffer {
	uint indices[];
};


struct triangle3 {
	vec3 v1, v2, v3;
};

//https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
bool ray_intersects_triangle(in vec3 ray_origin, 
                             in vec3 ray_vector, 
                             in triangle3 triangle,
                             inout vec3 out_intersection_point)
{
	//https://en.cppreference.com/w/cpp/types/climits
	float epsilon = 1.19209e-07;

	vec3 edge1 = triangle.v2 - triangle.v1;
	vec3 edge2 = triangle.v3 - triangle.v1;
	vec3 ray_cross_e2 = cross(ray_vector, edge2);
	float det = dot(edge1, ray_cross_e2);

	if (det > -epsilon && det < epsilon)
			return false;    // This ray is parallel to this triangle.

	float inv_det = 1.0 / det;
	vec3 s = ray_origin - triangle.v1;
	float u = inv_det * dot(s, ray_cross_e2);

	if (u < 0 || u > 1)
			return false;

	vec3 s_cross_e1 = cross(s, edge1);
	float v = inv_det * dot(ray_vector, s_cross_e1);

	if (v < 0 || u + v > 1)
			return false;

	// At this stage we can compute t to find out where the intersection point is on the line.
	float t = inv_det * dot(edge2, s_cross_e1);

	if (t > epsilon) // ray intersection
	{
			out_intersection_point = ray_origin + ray_vector * t;
			return true;
	}
	else // This means that there is a line intersection but not a ray intersection.
			return false;
}

void main() {
	ivec2 resultDim = imageSize(result);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / resultDim;

	vec4 dir = normalize(vec4(0.5 - uv.x, uv.y, 3, 0)) * global_uniform.camera_rotation;
	vec3 intersection;

	vec4 color = imageLoad(result, ivec2(gl_GlobalInvocationID.xy));
	color *= 0.9;
	color += vec4(uv, 0.0, 1.0) * 0.01;

	vec4 position = vec4(0, 0, 0, 1) + global_uniform.camera_translation;
	for (uint i = 0; i < indices.length(); i += 3) {
		triangle3 t;
		t.v1 = vertices[indices[i+0]].pos;
		t.v2 = vertices[indices[i+1]].pos;
		t.v3 = vertices[indices[i+2]].pos;

		if (ray_intersects_triangle(position.xyz, dir.xyz, t, intersection)) {
			color.b = 1.0;
		}
	}
	color.a = 2.0;
	imageStore(result, ivec2(gl_GlobalInvocationID.xy), color);
}
