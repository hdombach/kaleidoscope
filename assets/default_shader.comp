#version 450

layout(set = 0, binding = 0, rgba8) uniform image2D result;

layout(set = 0, binding = 1) uniform GlobalUniformBuffer {
	vec4 camera_translation;
	mat4 camera_rotation;
} global_uniform;

struct Vertex {
		vec3 pos;
		vec3 color;
		vec2 tex_coord;
};

/*BVNODE_DECL*/

/*NODE_DECL*/

/*RESOURCE_DECL*/

layout(binding = 2) readonly buffer vertex_buffer {
	Vertex vertices[];
};
layout(binding = 3) readonly buffer mesh_buffer {
	BVNode bvnodes[];
};
layout(binding = 4) readonly buffer node_buffer {
	Node nodes[];
};
layout(binding = 5) uniform sampler2D textures[/*TEXTURE_COUNT*/];


struct Triangle {
	vec3 v1, v2, v3;
};

// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
// returns (near, far)
vec2 intersect_aabb(vec3 ray_pos, vec3 ray_dir, vec3 box_min, vec3 box_max) {
    vec3 tmin = (box_min - ray_pos) / ray_dir;
    vec3 tmax = (box_max - ray_pos) / ray_dir;
    vec3 t1 = min(tmin, tmax);
    vec3 t2 = max(tmin, tmax);
    float tnear = max(max(t1.x, t1.y), t1.z);
    float tfar = min(min(t2.x, t2.y), t2.z);
    return vec2(tnear, tfar);
}

//https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
bool ray_intersects_triangle(in vec3 ray_origin, 
                             in vec3 ray_vector, 
                             in Triangle triangle,
                             inout vec3 out_intersection_point,
                             inout vec2 uv)
{
	//https://en.cppreference.com/w/cpp/types/climits
	float epsilon = 1.19209e-07;

	vec3 edge1 = triangle.v2 - triangle.v1;
	vec3 edge2 = triangle.v3 - triangle.v1;
	vec3 ray_cross_e2 = cross(ray_vector, edge2);
	float det = dot(edge1, ray_cross_e2);

	if (det > -epsilon && det < epsilon)
			return false;    // This ray is parallel to this triangle.

	float inv_det = 1.0 / det;
	vec3 s = ray_origin - triangle.v1;
	float u = inv_det * dot(s, ray_cross_e2);

	if (u < 0 || u > 1)
			return false;

	vec3 s_cross_e1 = cross(s, edge1);
	float v = inv_det * dot(ray_vector, s_cross_e1);

	if (v < 0 || u + v > 1)
			return false;

	// At this stage we can compute t to find out where the intersection point is on the line.
	float t = inv_det * dot(edge2, s_cross_e1);

	if (t > epsilon) // ray intersection
	{
			out_intersection_point = ray_origin + ray_vector * t;
			uv = vec2(u, v);
			return true;
	}
	else // This means that there is a line intersection but not a ray intersection.
			return false;
}

bool intersect_mesh(vec3 ray_pos, vec3 ray_dir, uint m, inout uint debug) {
	vec2 intr;
	uint prevm = 0;

	vec3 intr_point;
	vec2 uv;

	while (m > 0) {
		if (bvnodes[m].type == BV_UNKNOWN) {
			return false;
		}

		if (bvnodes[m].type == BV_MESH) {
			Triangle t;

			intr = intersect_aabb(
				ray_pos,
				ray_dir,
				bvnodes[m].min_pos,
				bvnodes[m].max_pos);

			if (intr.x < intr.y) {
				debug += 1;
				if (bvnodes[m].lchild != -1) {
					t.v1 = vertices[bvnodes[m].lchild + 0].pos;
					t.v2 = vertices[bvnodes[m].lchild + 1].pos;
					t.v3 = vertices[bvnodes[m].lchild + 2].pos;
					if (ray_intersects_triangle(ray_pos, ray_dir, t, intr_point, uv)) {
						return true;
					}
				}
				if (bvnodes[m].rchild != -1) {
					t.v1 = vertices[bvnodes[m].rchild + 0].pos;
					t.v2 = vertices[bvnodes[m].rchild + 1].pos;
					t.v3 = vertices[bvnodes[m].rchild + 2].pos;
					if (ray_intersects_triangle(ray_pos, ray_dir, t, intr_point, uv)) {
						return true;
					}
				}
			}

			prevm = m;
			m = bvnodes[m].parent;
			continue;
		}

		if (bvnodes[m].type != BV_NODE) return false;

		if (prevm == bvnodes[m].parent) {
			intr = intersect_aabb(
				ray_pos,
				ray_dir,
				bvnodes[m].min_pos,
				bvnodes[m].max_pos);

			if (intr.x < intr.y) {
				prevm = m;
				m = bvnodes[m].lchild;
			} else {
				prevm = m;
				m = bvnodes[m].parent;
			}
		} else if (prevm == bvnodes[m].lchild) {
			prevm = m;
			m = bvnodes[m].rchild;
		} else if (prevm == bvnodes[m].rchild) {
			prevm = m;
			m = bvnodes[m].parent;
		}
	}
	return false;
}

void main() {
	ivec2 size = imageSize(result);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(size);

	vec4 dir = normalize(vec4(0.5 - uv.x, uv.y, 3, 0)) * global_uniform.camera_rotation;
	vec2 intr_uv;
	vec2 tex_uv;

	//vec4 color = imageLoad(result, ivec2(gl_GlobalInvocationID.xy));
	vec4 color = vec4(uv, 0.0, 1.0) * 0.1;

	vec4 position = vec4(0, 0, 0, 1) + global_uniform.camera_translation;

	for (uint n = 0; n < nodes.length(); n++) {
		uint m = nodes[n].mesh_id;
		uint debug = 0;
		if (intersect_mesh(position.xyz, dir.xyz, m, debug)) {
			color.x = 1.0;
		}
		color.y = debug;
		color.y /= 10;
	}

	color.a = 1.0;
	imageStore(result, ivec2(gl_GlobalInvocationID.xy), color);
}
