#version 450

layout(set = 0, binding = 0, rgba8) uniform image2D result;

layout(binding = 1, rgba16f) uniform image2D accumulator;

/*COMMON_INCL*/

/*VERTEX_DECL*/

/*BVNODE_DECL*/

/*NODE_DECL*/

/*RESOURCE_DECL*/

/*UNIFORM_DECL*/

/*DE_FUNCS*/

layout(set = 0, binding = 2) uniform UniformBlock {
	ComputeUniform u;
} compute_uniform;

layout(binding = 3) readonly buffer vertex_buffer {
	Vertex vertices[];
};
layout(binding = 4) readonly buffer mesh_buffer {
	BVNode bvnodes[];
};
layout(binding = 5) readonly buffer node_buffer {
	Node nodes[];
};
layout(binding = 6) uniform sampler2D textures[/*TEXTURE_COUNT*/];
/*MATERIAL_BUFFERS*/

float PI = 3.14159265358979;

struct Triangle {
	vec3 v1, v2, v3;
};

//---------------- RAND helper functions
//https://blog.bithole.dev/blogposts/random-float/

uint rotl(uint x, uint k) {
	return (x << k) | (x >> (32 - k));
}

uint next(inout uvec4 s) {
	uint result = s.x + s.w;
	uint t = s.y << 9;

	s.z ^= s.x;
	s.w ^= s.y;
	s.y ^= s.z;
	s.x ^= s.w;

	s.z ^= t;

	s.w = rotl(s.w, 11);

	return result;
}

float rand_float(inout uvec4 s) {
	uint result = next(s) >> 9 | 0x3f800000;
	return uintBitsToFloat(result) - 1.0f;
}

vec3 rand_vec3(inout uvec4 s) {
	return vec3(rand_float(s), rand_float(s), rand_float(s));
}

vec2 rand_vec2(inout uvec4 s) {
	return vec2(rand_float(s), rand_float(s));
}

vec3 rand_in_sphere(inout uvec4 s) {
	vec3 p;
	do {
		p = rand_vec3(s);
	} while ((p.x * p.x + p.y * p.y + p.z * p.z) > 1);
	return p;
}

vec3 rand_unit_vec3(inout uvec4 s) {
	return normalize(rand_in_sphere(s));
}

/*MATERIAL_SRCS*/

// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
// returns (near, far)
vec2 intersect_aabb(in Ray ray, vec3 box_min, vec3 box_max) {
    vec3 tmin = (box_min - ray.pos.xyz) / ray.dir.xyz;
    vec3 tmax = (box_max - ray.pos.xyz) / ray.dir.xyz;
    vec3 t1 = min(tmin, tmax);
    vec3 t2 = max(tmin, tmax);
    float tnear = max(max(t1.x, t1.y), t1.z);
    float tfar = min(min(t2.x, t2.y), t2.z);
    return vec2(tnear, tfar);
}

//https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
bool ray_intersects_triangle(
	in Ray ray, 
	in Triangle triangle,
	inout HitInfo info
) {
	//https://en.cppreference.com/w/cpp/types/climits
	float epsilon = 1.19209e-07;

	vec3 edge1 = triangle.v2 - triangle.v1;
	vec3 edge2 = triangle.v3 - triangle.v1;
	vec3 ray_cross_e2 = cross(ray.dir.xyz, edge2);
	float det = dot(edge1, ray_cross_e2);

	if (det > -epsilon && det < epsilon)
			return false;    // This ray is parallel to this triangle.

	float inv_det = 1.0 / det;
	vec3 s = ray.pos.xyz - triangle.v1;
	float u = inv_det * dot(s, ray_cross_e2);

	if (u < 0 || u > 1)
			return false;

	vec3 s_cross_e1 = cross(s, edge1);
	float v = inv_det * dot(ray.dir.xyz, s_cross_e1);

	if (v < 0 || u + v > 1)
			return false;

	// At this stage we can compute t to find out where the intersection point is on the line.
	float t = inv_det * dot(edge2, s_cross_e1);

	if (t > epsilon) // ray intersection
	{
		if (t < info.dist) {
			info.dist = t;
			info.pos = ray.pos.xyz + ray.dir.xyz * t;
			info.uv = vec2(u, v);
			info.normal = normalize(cross(triangle.v1 - triangle.v2, triangle.v1 - triangle.v3));
			return true;
		} else {
			return false;
		}
	}
	else // This means that there is a line intersection but not a ray intersection.
			return false;
}

bool intersect_de(
	uint mesh_id,
	Ray ray,
	inout HitInfo info
) {
	float step, smallest = 1000;
	info.iterations = 0;
	info.dist = 0;
	ray.dir = normalize(ray.dir);
	ray.pos.xyz += ray.dir.xyz * max(length(ray.pos.xyz) - 2, 0);
	do {
		/*DE_FUNC_CALLS*/
		/*if (step < global_uniform.de_small_step || info.iterations > global_uniform.de_iterations) {*/
		if (step < 0.0001 || info.iterations > 40) {
			return true;
		}
		info.iterations++;
		ray.pos.xyz += ray.dir.xyz * step;
		if (step < smallest) {
			smallest = step;
			info.pos = ray.pos.xyz;
		}
		info.dist += step;
		if (length(ray.pos.xyz) > 2.0) return false;
	} while (true);
	return false;
}

bool intersect_bvnode(
	in Ray ray,
	uint id,
	inout HitInfo hit_info
) {
	vec2 intr, tuv;
	uint previd = 0;
	vec3 intr_point;
	bool result = false;
	HitInfo t_hit_info;

	while (id > 0) {
		if (bvnodes[id].type == BV_UNKNOWN) {
			return false;
		} else if (bvnodes[id].type == BV_MESH) {
			Triangle t;

			hit_info.debug++;
			intr = intersect_aabb(
				ray,
				bvnodes[id].min_pos,
				bvnodes[id].max_pos);

			if (intr.x < intr.y && intr.x < hit_info.dist) {
				hit_info.debug += 1;
				if (bvnodes[id].lchild != -1) {
					uint tm = bvnodes[id].lchild;
					t.v1 = vertices[tm + 0].pos;
					t.v2 = vertices[tm + 1].pos;
					t.v3 = vertices[tm + 2].pos;
					if (ray_intersects_triangle(ray, t, hit_info)) {
						vec2 uv1 = vertices[tm + 0].tex_coord;
						vec2 uv2 = vertices[tm + 1].tex_coord;
						vec2 uv3 = vertices[tm + 2].tex_coord;

						vec2 uv = hit_info.uv;
						hit_info.uv = (1 - uv.x - uv.y) * uv1;
						hit_info.uv += uv.x * uv2;
						hit_info.uv += uv.y * uv3;
						result = true;
					}
				}
				if (bvnodes[id].rchild != -1) {
					uint tm = bvnodes[id].rchild;
					t.v1 = vertices[tm + 0].pos;
					t.v2 = vertices[tm + 1].pos;
					t.v3 = vertices[tm + 2].pos;
					if (ray_intersects_triangle(ray, t, hit_info)) {
						vec2 uv1 = vertices[tm + 0].tex_coord;
						vec2 uv2 = vertices[tm + 1].tex_coord;
						vec2 uv3 = vertices[tm + 2].tex_coord;

						vec2 uv = hit_info.uv;
						hit_info.uv = (1 - uv.x - uv.y) * uv1;
						hit_info.uv += uv.x * uv2;
						hit_info.uv += uv.y * uv3;
						result = true;
					}
				}
			}

			previd = id;
			id = bvnodes[id].parent;
			continue;
		} else if (bvnodes[id].type == BV_DE) {
			intr = intersect_aabb(
				ray,
				bvnodes[id].min_pos,
				bvnodes[id].max_pos
			);

			if (intr.x < intr.y && intr.x < hit_info.dist) {
				if (intersect_de(bvnodes[id].lchild, ray, t_hit_info)) {
					result = true;
				}
			}
			previd = id;
			id = bvnodes[id].parent;
		} else if (bvnodes[id].type == BV_NODE) {
			if (previd == bvnodes[id].parent) {
				hit_info.debug++;
				intr = intersect_aabb(
					ray,
					bvnodes[id].min_pos,
					bvnodes[id].max_pos);

				if (intr.x < intr.y && intr.x < hit_info.dist) {
					previd = id;
					id = bvnodes[id].lchild;
				} else {
					previd = id;
					id = bvnodes[id].parent;
				}
			} else if (previd == bvnodes[id].lchild) {
				previd = id;
				id = bvnodes[id].rchild;
			} else if (previd == bvnodes[id].rchild) {
				previd = id;
				id = bvnodes[id].parent;
			}
		} else {
			return false;
		}

	}
	return result;
}

bool intersect_nodes(
	Ray ray,
	inout HitInfo hit_info
) {
	bool result = false;
	//Assuming first node is not being used.
	for (uint n = 1; n < nodes.length(); n++) {
		Ray node_ray = ray;
		node_ray.pos = nodes[n].object_transformation * vec4(node_ray.pos.xyz, 1.0);
		node_ray.dir = nodes[n].object_transformation * vec4(node_ray.dir.xyz, 0.0); // what black magic is this
		float ratio = length(node_ray.dir.xyz);
		node_ray.dir /= ratio;
		hit_info.dist *= ratio;

		if (intersect_bvnode(node_ray, nodes[n].mesh_id, hit_info)) {
			hit_info.node_id = n;
			result = true;
		}
		hit_info.dist /= ratio;
	}
	return result;
}

vec3 raytrace(Ray ray, inout uvec4 seed) {
	vec4 color;
	vec3 absorbed = vec3(1.0);
	vec3 light = vec3(0.0);

	HitInfo hit_info;

	for (int i = 0; i < 5; i++) {
		hit_info.dist = 3.402823466e+38;
		if (intersect_nodes(ray, hit_info)) {
			/*MATERIAL_CALLS*/
			absorbed *= color.xyz;
			ray.pos += ray.dir * (hit_info.dist - 0.0001);

			if (dot(hit_info.normal, ray.dir.xyz) > 0) {
				hit_info.normal *= -1; //correct normal
			}
			ray.dir.xyz = rand_unit_vec3(seed);
			if (dot(ray.dir.xyz, hit_info.normal) < 0) {
				ray.dir.xyz *= -1;
			}
		} else {
			//temp skybox for now
			if (dot(ray.dir.xyz, vec3(0.3, 0.3, 1.0)) > 0.98) {
				light = vec3(5);
			} else {
				light = vec3(0.5);
			}
			break;
		}
	}
	return light * absorbed;
}

void main() {
	ivec2 size = imageSize(result);
	uint index = (gl_GlobalInvocationID.x + compute_uniform.u.compute_index) % (size.x * size.y);

	ivec2 dst;
	dst.x = int(index % size.x);
	dst.y = int(index / size.x);

	uvec4 seed = compute_uniform.u.seed;
	//uncoment to get a dither pattern
	if (false) {
		for (int i = 0; i < (dst.x % 2) * 2 + (dst.y % 2); i++) {
			next(seed);
		}
	}

	vec2 uv = (vec2(dst) + rand_vec2(seed)) / vec2(size);
	vec4 dir = vec4(uv.x * 2.0 - 1.0, 1.0 - uv.y * 2.0, 2.0, 0.0);
	dir.x *= compute_uniform.u.aspect;
	dir.z = 1.0 / tan(compute_uniform.u.fovy * PI / 360.0f);
	dir = normalize(dir) * -1 * compute_uniform.u.rotation;
	vec2 intr_uv;
	vec2 tex_uv;
	uint node_id = 0;

	dst = size - dst;

	vec4 position = vec4(0, 0, 0, 1) - compute_uniform.u.translation;


	uint debug = 0;
	vec3 normal;

	Ray ray = {
		position,
		dir
	};

	vec4 color = imageLoad(accumulator, dst);
	color.xyz += raytrace(ray, seed);
	imageStore(accumulator, dst, color);
	color /= compute_uniform.u.ray_count;
	//color.xyz = vec3(pow(color.x, 1/2.2), pow(color.y, 1/2.2), pow(color.z, 1/2.2));
	color.w = 1.0;
	imageStore(result, dst, color);
}
