#version 450
#
{%include "assets/shaders/common.hpp.cg"%}

{{struct_decls()}}

struct Node {
	{% for decl in node_declarations %}
	{{declaration(decl)}}
	{% endfor %}
};

//sampler2DShadow

layout(location = 1) in vec2 fragTexCoord;

layout(location = 0) out vec4 outColor;
layout(location = 1) out uint outNode;

layout(set = 0, binding = 0) uniform GlobalUniformBuffer {
	{% for decl in global_declarations %}
	{{declaration(decl)}}
	{% endfor %}
} global_uniform;

layout(set = 1, binding = 0) uniform sampler2D depthSampler;

layout(set = 1, binding = 1) uniform usampler2D node_id_sampler;

layout(set = 1, binding = 2) readonly buffer node_buffer {
	Node nodes[];
};

{{ de_funcs() }}


bool intersect_nodes(vec3 pos, vec3 dir, inout float d, inout uint id, inout int iterations, inout vec3 closest_pos, inout vec3 normal) {
	uint n = 1;
	d = global_uniform.z_far;
	HitInfo hit_info;
	hit_info.dist = 3.402823466e+38;
	bool hit = false;
	for (uint n = 1; n < nodes.length(); n++) {
		if (nodes[n].mesh_id == 0) continue;
		vec4 trans_pos = nodes[n].transformation * vec4(pos, 1.0);
		vec4 trans_dir = nodes[n].transformation * vec4(dir, 0.0);
		Ray ray = {
			trans_pos,
			trans_dir
		};
		if (intersect_de(nodes[n].mesh_id, ray, hit_info)) {
			hit = true;
			if (hit_info.dist < d) {
				d = hit_info.dist;
				trans_pos = nodes[n].inverse_transformation * vec4(hit_info.pos, 1.0);
				hit_info.pos = trans_pos.xyz;
				iterations = hit_info.iterations;
				normal = hit_info.normal;
				id = n;
			}
		}
	}
	return hit;
}

float PI = 3.14159265358979;

void main() {
	vec2 uv = fragTexCoord;

	vec4 dir = vec4(1.0 - uv.x * 2.0, uv.y * 2.0 - 1.0, 2.0, 0.0);
	dir.x *= global_uniform.aspect;
	dir.z = 1.0 / tan(global_uniform.fovy * PI / 360.0f);
	dir = normalize(dir) * -1 * global_uniform.camera_rotation;
	vec2 intr_uv;
	vec2 tex_uv;
	uint node_id = 0;

	vec4 position = vec4(0, 0, 0, 1) - global_uniform.camera_translation;


	uint debug = 0;
	vec3 normal;

	vec4 color;
	vec4 hit_pos = vec4(0.0, 0.0, 0.0, 1.0);

	int iterations;
	float d = 0;
	float cur_depth = texture(depthSampler, uv).x;
	outNode = texture(node_id_sampler, uv).x;
	if (intersect_nodes(position.xyz, dir.xyz, d, node_id, iterations, hit_pos.xyz, normal)) {

		hit_pos.w = 1.0;
		hit_pos = global_uniform.camera_transformation * hit_pos;
		d = hit_pos.z / global_uniform.z_far;

		if (cur_depth > d) {
			outNode = node_id;
			color.xyz = vec3(float(iterations) / global_uniform.de_iterations);
			color.w = 1.0;
		} else {
			color.w = 0.0;
		}
	} else {
		color = vec4(0.0, 0.0, 0, 0.0);
	}
	outColor = color;
}
